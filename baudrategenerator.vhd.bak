library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity baudrategenerator is 
	PORT(sel : in std_logic_vector(2 downto 0);
		 clk : in std_logic;
		 bclkx8, bclk: out std_logic);
end baudrategenerator;


architecture rtl of baudrategenerator is 
signal int_divby41: std_logic;
signal int_divby256: std_logic_vector(0 to 7);
signal integer_sel: integer;

component DividebyN
	generic(n : integer := 2);
	port(i_clk : in std_logic; o_clk: out std_logic);
end component;

	-- component nbit8to1mux
	-- 	generic(n : integer := 8);
	-- 	port(i_0, i_1, i_2, i_3, i_4, i_5, i_6, i_7: in std_logic_vector(n-1 downto 0);
	-- 		 mux_sel: in std_logic_vector(2 downto 0); 
	-- 		 o : out std_logic_vector(n-1 downto 0));
	-- end component;

begin 
	divby41: DividebyN
		generic map(n => 41)
		port map(i_clk => clk, o_clk => int_divby41);

	--divides the divby41 clock by 2, 4, 8, ... or 256
	--replaces the need for a mux
	divby256_0: DividebyN
			generic map(n => 2) 
			port map(i_clk => int_divby41, o_clk => int_divby256(0));
	ripple_divby2: for i in 1 to 7 generate
		divby256_i: DividebyN
			generic map(n => 2) 
			port map(i_clk => int_divby256(i-1), o_clk => int_divby256(i)); 
	end generate;

	divby8: DividebyN
		generic map(n => 8)
		port map(i_clk => int_divby256(integer_sel), o_clk => bclk);

integer_sel <= to_integer(unsigned(sel));
bclkx8 <= int_divby256(integer_sel);

end rtl;